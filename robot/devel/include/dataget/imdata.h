// Generated by gencpp from file dataget/imdata.msg
// DO NOT EDIT!


#ifndef DATAGET_MESSAGE_IMDATA_H
#define DATAGET_MESSAGE_IMDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dataget
{
template <class ContainerAllocator>
struct imdata_
{
  typedef imdata_<ContainerAllocator> Type;

  imdata_()
    : frameid(0)
    , classid(0)
    , x(0.0)
    , y(0.0)
    , width(0.0)
    , height(0.0)  {
    }
  imdata_(const ContainerAllocator& _alloc)
    : frameid(0)
    , classid(0)
    , x(0.0)
    , y(0.0)
    , width(0.0)
    , height(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _frameid_type;
  _frameid_type frameid;

   typedef int32_t _classid_type;
  _classid_type classid;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::dataget::imdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dataget::imdata_<ContainerAllocator> const> ConstPtr;

}; // struct imdata_

typedef ::dataget::imdata_<std::allocator<void> > imdata;

typedef boost::shared_ptr< ::dataget::imdata > imdataPtr;
typedef boost::shared_ptr< ::dataget::imdata const> imdataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dataget::imdata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dataget::imdata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dataget::imdata_<ContainerAllocator1> & lhs, const ::dataget::imdata_<ContainerAllocator2> & rhs)
{
  return lhs.frameid == rhs.frameid &&
    lhs.classid == rhs.classid &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dataget::imdata_<ContainerAllocator1> & lhs, const ::dataget::imdata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dataget

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dataget::imdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dataget::imdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dataget::imdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dataget::imdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dataget::imdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dataget::imdata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dataget::imdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28c7cb1f506871314105166747b2c650";
  }

  static const char* value(const ::dataget::imdata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28c7cb1f50687131ULL;
  static const uint64_t static_value2 = 0x4105166747b2c650ULL;
};

template<class ContainerAllocator>
struct DataType< ::dataget::imdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dataget/imdata";
  }

  static const char* value(const ::dataget::imdata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dataget::imdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 frameid\n"
"int32 classid\n"
"float32 x\n"
"float32 y\n"
"float32 width\n"
"float32 height\n"
;
  }

  static const char* value(const ::dataget::imdata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dataget::imdata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frameid);
      stream.next(m.classid);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.width);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imdata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dataget::imdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dataget::imdata_<ContainerAllocator>& v)
  {
    s << indent << "frameid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frameid);
    s << indent << "classid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.classid);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATAGET_MESSAGE_IMDATA_H
